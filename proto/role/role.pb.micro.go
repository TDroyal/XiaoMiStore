// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/role.proto

package role

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Role service

func NewRoleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Role service

type RoleService interface {
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error)
	EditRole(ctx context.Context, in *EditRoleRequest, opts ...client.CallOption) (*EditRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...client.CallOption) (*GetRoleListResponse, error)
	GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, opts ...client.CallOption) (*GetRoleInfoResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.AddRole", in)
	out := new(AddRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) EditRole(ctx context.Context, in *EditRoleRequest, opts ...client.CallOption) (*EditRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.EditRole", in)
	out := new(EditRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...client.CallOption) (*GetRoleListResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetRoleList", in)
	out := new(GetRoleListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, opts ...client.CallOption) (*GetRoleInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetRoleInfo", in)
	out := new(GetRoleInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	AddRole(context.Context, *AddRoleRequest, *AddRoleResponse) error
	EditRole(context.Context, *EditRoleRequest, *EditRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	GetRoleList(context.Context, *GetRoleListRequest, *GetRoleListResponse) error
	GetRoleInfo(context.Context, *GetRoleInfoRequest, *GetRoleInfoResponse) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error
		EditRole(ctx context.Context, in *EditRoleRequest, out *EditRoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		GetRoleList(ctx context.Context, in *GetRoleListRequest, out *GetRoleListResponse) error
		GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, out *GetRoleInfoResponse) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error {
	return h.RoleHandler.AddRole(ctx, in, out)
}

func (h *roleHandler) EditRole(ctx context.Context, in *EditRoleRequest, out *EditRoleResponse) error {
	return h.RoleHandler.EditRole(ctx, in, out)
}

func (h *roleHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RoleHandler.DeleteRole(ctx, in, out)
}

func (h *roleHandler) GetRoleList(ctx context.Context, in *GetRoleListRequest, out *GetRoleListResponse) error {
	return h.RoleHandler.GetRoleList(ctx, in, out)
}

func (h *roleHandler) GetRoleInfo(ctx context.Context, in *GetRoleInfoRequest, out *GetRoleInfoResponse) error {
	return h.RoleHandler.GetRoleInfo(ctx, in, out)
}
