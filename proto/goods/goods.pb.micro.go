// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/goods.proto

package goods

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Goods service

func NewGoodsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Goods service

type GoodsService interface {
	AddGoods(ctx context.Context, in *AddGoodsRequest, opts ...client.CallOption) (*AddGoodsResponse, error)
}

type goodsService struct {
	c    client.Client
	name string
}

func NewGoodsService(name string, c client.Client) GoodsService {
	return &goodsService{
		c:    c,
		name: name,
	}
}

func (c *goodsService) AddGoods(ctx context.Context, in *AddGoodsRequest, opts ...client.CallOption) (*AddGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "Goods.AddGoods", in)
	out := new(AddGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Goods service

type GoodsHandler interface {
	AddGoods(context.Context, *AddGoodsRequest, *AddGoodsResponse) error
}

func RegisterGoodsHandler(s server.Server, hdlr GoodsHandler, opts ...server.HandlerOption) error {
	type goods interface {
		AddGoods(ctx context.Context, in *AddGoodsRequest, out *AddGoodsResponse) error
	}
	type Goods struct {
		goods
	}
	h := &goodsHandler{hdlr}
	return s.Handle(s.NewHandler(&Goods{h}, opts...))
}

type goodsHandler struct {
	GoodsHandler
}

func (h *goodsHandler) AddGoods(ctx context.Context, in *AddGoodsRequest, out *AddGoodsResponse) error {
	return h.GoodsHandler.AddGoods(ctx, in, out)
}
